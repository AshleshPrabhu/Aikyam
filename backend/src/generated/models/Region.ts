
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Region` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Region
 * 
 */
export type RegionModel = runtime.Types.Result.DefaultSelection<Prisma.$RegionPayload>

export type AggregateRegion = {
  _count: RegionCountAggregateOutputType | null
  _min: RegionMinAggregateOutputType | null
  _max: RegionMaxAggregateOutputType | null
}

export type RegionMinAggregateOutputType = {
  id: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type RegionMaxAggregateOutputType = {
  id: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type RegionCountAggregateOutputType = {
  id: number
  name: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type RegionMinAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type RegionMaxAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type RegionCountAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type RegionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Region to aggregate.
   */
  where?: Prisma.RegionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Regions to fetch.
   */
  orderBy?: Prisma.RegionOrderByWithRelationInput | Prisma.RegionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RegionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Regions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Regions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Regions
  **/
  _count?: true | RegionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RegionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RegionMaxAggregateInputType
}

export type GetRegionAggregateType<T extends RegionAggregateArgs> = {
      [P in keyof T & keyof AggregateRegion]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRegion[P]>
    : Prisma.GetScalarType<T[P], AggregateRegion[P]>
}




export type RegionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RegionWhereInput
  orderBy?: Prisma.RegionOrderByWithAggregationInput | Prisma.RegionOrderByWithAggregationInput[]
  by: Prisma.RegionScalarFieldEnum[] | Prisma.RegionScalarFieldEnum
  having?: Prisma.RegionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RegionCountAggregateInputType | true
  _min?: RegionMinAggregateInputType
  _max?: RegionMaxAggregateInputType
}

export type RegionGroupByOutputType = {
  id: string
  name: string
  createdAt: Date
  updatedAt: Date
  _count: RegionCountAggregateOutputType | null
  _min: RegionMinAggregateOutputType | null
  _max: RegionMaxAggregateOutputType | null
}

type GetRegionGroupByPayload<T extends RegionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RegionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RegionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RegionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RegionGroupByOutputType[P]>
      }
    >
  >



export type RegionWhereInput = {
  AND?: Prisma.RegionWhereInput | Prisma.RegionWhereInput[]
  OR?: Prisma.RegionWhereInput[]
  NOT?: Prisma.RegionWhereInput | Prisma.RegionWhereInput[]
  id?: Prisma.StringFilter<"Region"> | string
  name?: Prisma.StringFilter<"Region"> | string
  createdAt?: Prisma.DateTimeFilter<"Region"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Region"> | Date | string
  villages?: Prisma.VillageListRelationFilter
}

export type RegionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  villages?: Prisma.VillageOrderByRelationAggregateInput
}

export type RegionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.RegionWhereInput | Prisma.RegionWhereInput[]
  OR?: Prisma.RegionWhereInput[]
  NOT?: Prisma.RegionWhereInput | Prisma.RegionWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"Region"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Region"> | Date | string
  villages?: Prisma.VillageListRelationFilter
}, "id" | "name">

export type RegionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.RegionCountOrderByAggregateInput
  _max?: Prisma.RegionMaxOrderByAggregateInput
  _min?: Prisma.RegionMinOrderByAggregateInput
}

export type RegionScalarWhereWithAggregatesInput = {
  AND?: Prisma.RegionScalarWhereWithAggregatesInput | Prisma.RegionScalarWhereWithAggregatesInput[]
  OR?: Prisma.RegionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RegionScalarWhereWithAggregatesInput | Prisma.RegionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Region"> | string
  name?: Prisma.StringWithAggregatesFilter<"Region"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Region"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Region"> | Date | string
}

export type RegionCreateInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  villages?: Prisma.VillageCreateNestedManyWithoutRegionInput
}

export type RegionUncheckedCreateInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  villages?: Prisma.VillageUncheckedCreateNestedManyWithoutRegionInput
}

export type RegionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  villages?: Prisma.VillageUpdateManyWithoutRegionNestedInput
}

export type RegionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  villages?: Prisma.VillageUncheckedUpdateManyWithoutRegionNestedInput
}

export type RegionCreateManyInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RegionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RegionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RegionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type RegionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type RegionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type RegionScalarRelationFilter = {
  is?: Prisma.RegionWhereInput
  isNot?: Prisma.RegionWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type RegionCreateNestedOneWithoutVillagesInput = {
  create?: Prisma.XOR<Prisma.RegionCreateWithoutVillagesInput, Prisma.RegionUncheckedCreateWithoutVillagesInput>
  connectOrCreate?: Prisma.RegionCreateOrConnectWithoutVillagesInput
  connect?: Prisma.RegionWhereUniqueInput
}

export type RegionUpdateOneRequiredWithoutVillagesNestedInput = {
  create?: Prisma.XOR<Prisma.RegionCreateWithoutVillagesInput, Prisma.RegionUncheckedCreateWithoutVillagesInput>
  connectOrCreate?: Prisma.RegionCreateOrConnectWithoutVillagesInput
  upsert?: Prisma.RegionUpsertWithoutVillagesInput
  connect?: Prisma.RegionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.RegionUpdateToOneWithWhereWithoutVillagesInput, Prisma.RegionUpdateWithoutVillagesInput>, Prisma.RegionUncheckedUpdateWithoutVillagesInput>
}

export type RegionCreateWithoutVillagesInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RegionUncheckedCreateWithoutVillagesInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RegionCreateOrConnectWithoutVillagesInput = {
  where: Prisma.RegionWhereUniqueInput
  create: Prisma.XOR<Prisma.RegionCreateWithoutVillagesInput, Prisma.RegionUncheckedCreateWithoutVillagesInput>
}

export type RegionUpsertWithoutVillagesInput = {
  update: Prisma.XOR<Prisma.RegionUpdateWithoutVillagesInput, Prisma.RegionUncheckedUpdateWithoutVillagesInput>
  create: Prisma.XOR<Prisma.RegionCreateWithoutVillagesInput, Prisma.RegionUncheckedCreateWithoutVillagesInput>
  where?: Prisma.RegionWhereInput
}

export type RegionUpdateToOneWithWhereWithoutVillagesInput = {
  where?: Prisma.RegionWhereInput
  data: Prisma.XOR<Prisma.RegionUpdateWithoutVillagesInput, Prisma.RegionUncheckedUpdateWithoutVillagesInput>
}

export type RegionUpdateWithoutVillagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RegionUncheckedUpdateWithoutVillagesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type RegionCountOutputType
 */

export type RegionCountOutputType = {
  villages: number
}

export type RegionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  villages?: boolean | RegionCountOutputTypeCountVillagesArgs
}

/**
 * RegionCountOutputType without action
 */
export type RegionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RegionCountOutputType
   */
  select?: Prisma.RegionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * RegionCountOutputType without action
 */
export type RegionCountOutputTypeCountVillagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.VillageWhereInput
}


export type RegionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  villages?: boolean | Prisma.Region$villagesArgs<ExtArgs>
  _count?: boolean | Prisma.RegionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["region"]>

export type RegionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["region"]>

export type RegionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["region"]>

export type RegionSelectScalar = {
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type RegionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["region"]>
export type RegionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  villages?: boolean | Prisma.Region$villagesArgs<ExtArgs>
  _count?: boolean | Prisma.RegionCountOutputTypeDefaultArgs<ExtArgs>
}
export type RegionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type RegionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $RegionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Region"
  objects: {
    villages: Prisma.$VillagePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["region"]>
  composites: {}
}

export type RegionGetPayload<S extends boolean | null | undefined | RegionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RegionPayload, S>

export type RegionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RegionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RegionCountAggregateInputType | true
  }

export interface RegionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Region'], meta: { name: 'Region' } }
  /**
   * Find zero or one Region that matches the filter.
   * @param {RegionFindUniqueArgs} args - Arguments to find a Region
   * @example
   * // Get one Region
   * const region = await prisma.region.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RegionFindUniqueArgs>(args: Prisma.SelectSubset<T, RegionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RegionClient<runtime.Types.Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Region that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RegionFindUniqueOrThrowArgs} args - Arguments to find a Region
   * @example
   * // Get one Region
   * const region = await prisma.region.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RegionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RegionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RegionClient<runtime.Types.Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Region that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RegionFindFirstArgs} args - Arguments to find a Region
   * @example
   * // Get one Region
   * const region = await prisma.region.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RegionFindFirstArgs>(args?: Prisma.SelectSubset<T, RegionFindFirstArgs<ExtArgs>>): Prisma.Prisma__RegionClient<runtime.Types.Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Region that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RegionFindFirstOrThrowArgs} args - Arguments to find a Region
   * @example
   * // Get one Region
   * const region = await prisma.region.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RegionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RegionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RegionClient<runtime.Types.Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Regions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RegionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Regions
   * const regions = await prisma.region.findMany()
   * 
   * // Get first 10 Regions
   * const regions = await prisma.region.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const regionWithIdOnly = await prisma.region.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RegionFindManyArgs>(args?: Prisma.SelectSubset<T, RegionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Region.
   * @param {RegionCreateArgs} args - Arguments to create a Region.
   * @example
   * // Create one Region
   * const Region = await prisma.region.create({
   *   data: {
   *     // ... data to create a Region
   *   }
   * })
   * 
   */
  create<T extends RegionCreateArgs>(args: Prisma.SelectSubset<T, RegionCreateArgs<ExtArgs>>): Prisma.Prisma__RegionClient<runtime.Types.Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Regions.
   * @param {RegionCreateManyArgs} args - Arguments to create many Regions.
   * @example
   * // Create many Regions
   * const region = await prisma.region.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RegionCreateManyArgs>(args?: Prisma.SelectSubset<T, RegionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Regions and returns the data saved in the database.
   * @param {RegionCreateManyAndReturnArgs} args - Arguments to create many Regions.
   * @example
   * // Create many Regions
   * const region = await prisma.region.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Regions and only return the `id`
   * const regionWithIdOnly = await prisma.region.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RegionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RegionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Region.
   * @param {RegionDeleteArgs} args - Arguments to delete one Region.
   * @example
   * // Delete one Region
   * const Region = await prisma.region.delete({
   *   where: {
   *     // ... filter to delete one Region
   *   }
   * })
   * 
   */
  delete<T extends RegionDeleteArgs>(args: Prisma.SelectSubset<T, RegionDeleteArgs<ExtArgs>>): Prisma.Prisma__RegionClient<runtime.Types.Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Region.
   * @param {RegionUpdateArgs} args - Arguments to update one Region.
   * @example
   * // Update one Region
   * const region = await prisma.region.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RegionUpdateArgs>(args: Prisma.SelectSubset<T, RegionUpdateArgs<ExtArgs>>): Prisma.Prisma__RegionClient<runtime.Types.Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Regions.
   * @param {RegionDeleteManyArgs} args - Arguments to filter Regions to delete.
   * @example
   * // Delete a few Regions
   * const { count } = await prisma.region.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RegionDeleteManyArgs>(args?: Prisma.SelectSubset<T, RegionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Regions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RegionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Regions
   * const region = await prisma.region.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RegionUpdateManyArgs>(args: Prisma.SelectSubset<T, RegionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Regions and returns the data updated in the database.
   * @param {RegionUpdateManyAndReturnArgs} args - Arguments to update many Regions.
   * @example
   * // Update many Regions
   * const region = await prisma.region.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Regions and only return the `id`
   * const regionWithIdOnly = await prisma.region.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RegionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RegionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Region.
   * @param {RegionUpsertArgs} args - Arguments to update or create a Region.
   * @example
   * // Update or create a Region
   * const region = await prisma.region.upsert({
   *   create: {
   *     // ... data to create a Region
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Region we want to update
   *   }
   * })
   */
  upsert<T extends RegionUpsertArgs>(args: Prisma.SelectSubset<T, RegionUpsertArgs<ExtArgs>>): Prisma.Prisma__RegionClient<runtime.Types.Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Regions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RegionCountArgs} args - Arguments to filter Regions to count.
   * @example
   * // Count the number of Regions
   * const count = await prisma.region.count({
   *   where: {
   *     // ... the filter for the Regions we want to count
   *   }
   * })
  **/
  count<T extends RegionCountArgs>(
    args?: Prisma.Subset<T, RegionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RegionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Region.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RegionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RegionAggregateArgs>(args: Prisma.Subset<T, RegionAggregateArgs>): Prisma.PrismaPromise<GetRegionAggregateType<T>>

  /**
   * Group by Region.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RegionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RegionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RegionGroupByArgs['orderBy'] }
      : { orderBy?: RegionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RegionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Region model
 */
readonly fields: RegionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Region.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RegionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  villages<T extends Prisma.Region$villagesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Region$villagesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Region model
 */
export interface RegionFieldRefs {
  readonly id: Prisma.FieldRef<"Region", 'String'>
  readonly name: Prisma.FieldRef<"Region", 'String'>
  readonly createdAt: Prisma.FieldRef<"Region", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Region", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Region findUnique
 */
export type RegionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Region
   */
  select?: Prisma.RegionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Region
   */
  omit?: Prisma.RegionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RegionInclude<ExtArgs> | null
  /**
   * Filter, which Region to fetch.
   */
  where: Prisma.RegionWhereUniqueInput
}

/**
 * Region findUniqueOrThrow
 */
export type RegionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Region
   */
  select?: Prisma.RegionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Region
   */
  omit?: Prisma.RegionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RegionInclude<ExtArgs> | null
  /**
   * Filter, which Region to fetch.
   */
  where: Prisma.RegionWhereUniqueInput
}

/**
 * Region findFirst
 */
export type RegionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Region
   */
  select?: Prisma.RegionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Region
   */
  omit?: Prisma.RegionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RegionInclude<ExtArgs> | null
  /**
   * Filter, which Region to fetch.
   */
  where?: Prisma.RegionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Regions to fetch.
   */
  orderBy?: Prisma.RegionOrderByWithRelationInput | Prisma.RegionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Regions.
   */
  cursor?: Prisma.RegionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Regions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Regions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Regions.
   */
  distinct?: Prisma.RegionScalarFieldEnum | Prisma.RegionScalarFieldEnum[]
}

/**
 * Region findFirstOrThrow
 */
export type RegionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Region
   */
  select?: Prisma.RegionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Region
   */
  omit?: Prisma.RegionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RegionInclude<ExtArgs> | null
  /**
   * Filter, which Region to fetch.
   */
  where?: Prisma.RegionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Regions to fetch.
   */
  orderBy?: Prisma.RegionOrderByWithRelationInput | Prisma.RegionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Regions.
   */
  cursor?: Prisma.RegionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Regions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Regions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Regions.
   */
  distinct?: Prisma.RegionScalarFieldEnum | Prisma.RegionScalarFieldEnum[]
}

/**
 * Region findMany
 */
export type RegionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Region
   */
  select?: Prisma.RegionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Region
   */
  omit?: Prisma.RegionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RegionInclude<ExtArgs> | null
  /**
   * Filter, which Regions to fetch.
   */
  where?: Prisma.RegionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Regions to fetch.
   */
  orderBy?: Prisma.RegionOrderByWithRelationInput | Prisma.RegionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Regions.
   */
  cursor?: Prisma.RegionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Regions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Regions.
   */
  skip?: number
  distinct?: Prisma.RegionScalarFieldEnum | Prisma.RegionScalarFieldEnum[]
}

/**
 * Region create
 */
export type RegionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Region
   */
  select?: Prisma.RegionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Region
   */
  omit?: Prisma.RegionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RegionInclude<ExtArgs> | null
  /**
   * The data needed to create a Region.
   */
  data: Prisma.XOR<Prisma.RegionCreateInput, Prisma.RegionUncheckedCreateInput>
}

/**
 * Region createMany
 */
export type RegionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Regions.
   */
  data: Prisma.RegionCreateManyInput | Prisma.RegionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Region createManyAndReturn
 */
export type RegionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Region
   */
  select?: Prisma.RegionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Region
   */
  omit?: Prisma.RegionOmit<ExtArgs> | null
  /**
   * The data used to create many Regions.
   */
  data: Prisma.RegionCreateManyInput | Prisma.RegionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Region update
 */
export type RegionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Region
   */
  select?: Prisma.RegionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Region
   */
  omit?: Prisma.RegionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RegionInclude<ExtArgs> | null
  /**
   * The data needed to update a Region.
   */
  data: Prisma.XOR<Prisma.RegionUpdateInput, Prisma.RegionUncheckedUpdateInput>
  /**
   * Choose, which Region to update.
   */
  where: Prisma.RegionWhereUniqueInput
}

/**
 * Region updateMany
 */
export type RegionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Regions.
   */
  data: Prisma.XOR<Prisma.RegionUpdateManyMutationInput, Prisma.RegionUncheckedUpdateManyInput>
  /**
   * Filter which Regions to update
   */
  where?: Prisma.RegionWhereInput
  /**
   * Limit how many Regions to update.
   */
  limit?: number
}

/**
 * Region updateManyAndReturn
 */
export type RegionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Region
   */
  select?: Prisma.RegionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Region
   */
  omit?: Prisma.RegionOmit<ExtArgs> | null
  /**
   * The data used to update Regions.
   */
  data: Prisma.XOR<Prisma.RegionUpdateManyMutationInput, Prisma.RegionUncheckedUpdateManyInput>
  /**
   * Filter which Regions to update
   */
  where?: Prisma.RegionWhereInput
  /**
   * Limit how many Regions to update.
   */
  limit?: number
}

/**
 * Region upsert
 */
export type RegionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Region
   */
  select?: Prisma.RegionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Region
   */
  omit?: Prisma.RegionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RegionInclude<ExtArgs> | null
  /**
   * The filter to search for the Region to update in case it exists.
   */
  where: Prisma.RegionWhereUniqueInput
  /**
   * In case the Region found by the `where` argument doesn't exist, create a new Region with this data.
   */
  create: Prisma.XOR<Prisma.RegionCreateInput, Prisma.RegionUncheckedCreateInput>
  /**
   * In case the Region was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RegionUpdateInput, Prisma.RegionUncheckedUpdateInput>
}

/**
 * Region delete
 */
export type RegionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Region
   */
  select?: Prisma.RegionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Region
   */
  omit?: Prisma.RegionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RegionInclude<ExtArgs> | null
  /**
   * Filter which Region to delete.
   */
  where: Prisma.RegionWhereUniqueInput
}

/**
 * Region deleteMany
 */
export type RegionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Regions to delete
   */
  where?: Prisma.RegionWhereInput
  /**
   * Limit how many Regions to delete.
   */
  limit?: number
}

/**
 * Region.villages
 */
export type Region$villagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Village
   */
  select?: Prisma.VillageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Village
   */
  omit?: Prisma.VillageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VillageInclude<ExtArgs> | null
  where?: Prisma.VillageWhereInput
  orderBy?: Prisma.VillageOrderByWithRelationInput | Prisma.VillageOrderByWithRelationInput[]
  cursor?: Prisma.VillageWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.VillageScalarFieldEnum | Prisma.VillageScalarFieldEnum[]
}

/**
 * Region without action
 */
export type RegionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Region
   */
  select?: Prisma.RegionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Region
   */
  omit?: Prisma.RegionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RegionInclude<ExtArgs> | null
}

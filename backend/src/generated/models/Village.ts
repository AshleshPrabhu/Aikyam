
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Village` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Village
 * 
 */
export type VillageModel = runtime.Types.Result.DefaultSelection<Prisma.$VillagePayload>

export type AggregateVillage = {
  _count: VillageCountAggregateOutputType | null
  _min: VillageMinAggregateOutputType | null
  _max: VillageMaxAggregateOutputType | null
}

export type VillageMinAggregateOutputType = {
  id: string | null
  name: string | null
  regionId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type VillageMaxAggregateOutputType = {
  id: string | null
  name: string | null
  regionId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type VillageCountAggregateOutputType = {
  id: number
  name: number
  regionId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type VillageMinAggregateInputType = {
  id?: true
  name?: true
  regionId?: true
  createdAt?: true
  updatedAt?: true
}

export type VillageMaxAggregateInputType = {
  id?: true
  name?: true
  regionId?: true
  createdAt?: true
  updatedAt?: true
}

export type VillageCountAggregateInputType = {
  id?: true
  name?: true
  regionId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type VillageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Village to aggregate.
   */
  where?: Prisma.VillageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Villages to fetch.
   */
  orderBy?: Prisma.VillageOrderByWithRelationInput | Prisma.VillageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.VillageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Villages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Villages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Villages
  **/
  _count?: true | VillageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: VillageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: VillageMaxAggregateInputType
}

export type GetVillageAggregateType<T extends VillageAggregateArgs> = {
      [P in keyof T & keyof AggregateVillage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateVillage[P]>
    : Prisma.GetScalarType<T[P], AggregateVillage[P]>
}




export type VillageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.VillageWhereInput
  orderBy?: Prisma.VillageOrderByWithAggregationInput | Prisma.VillageOrderByWithAggregationInput[]
  by: Prisma.VillageScalarFieldEnum[] | Prisma.VillageScalarFieldEnum
  having?: Prisma.VillageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: VillageCountAggregateInputType | true
  _min?: VillageMinAggregateInputType
  _max?: VillageMaxAggregateInputType
}

export type VillageGroupByOutputType = {
  id: string
  name: string
  regionId: string
  createdAt: Date
  updatedAt: Date
  _count: VillageCountAggregateOutputType | null
  _min: VillageMinAggregateOutputType | null
  _max: VillageMaxAggregateOutputType | null
}

type GetVillageGroupByPayload<T extends VillageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<VillageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof VillageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], VillageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], VillageGroupByOutputType[P]>
      }
    >
  >



export type VillageWhereInput = {
  AND?: Prisma.VillageWhereInput | Prisma.VillageWhereInput[]
  OR?: Prisma.VillageWhereInput[]
  NOT?: Prisma.VillageWhereInput | Prisma.VillageWhereInput[]
  id?: Prisma.StringFilter<"Village"> | string
  name?: Prisma.StringFilter<"Village"> | string
  regionId?: Prisma.StringFilter<"Village"> | string
  createdAt?: Prisma.DateTimeFilter<"Village"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Village"> | Date | string
  region?: Prisma.XOR<Prisma.RegionScalarRelationFilter, Prisma.RegionWhereInput>
  vendors?: Prisma.VendorListRelationFilter
  assignments?: Prisma.AssignmentListRelationFilter
}

export type VillageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  regionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  region?: Prisma.RegionOrderByWithRelationInput
  vendors?: Prisma.VendorOrderByRelationAggregateInput
  assignments?: Prisma.AssignmentOrderByRelationAggregateInput
}

export type VillageWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name_regionId?: Prisma.VillageNameRegionIdCompoundUniqueInput
  AND?: Prisma.VillageWhereInput | Prisma.VillageWhereInput[]
  OR?: Prisma.VillageWhereInput[]
  NOT?: Prisma.VillageWhereInput | Prisma.VillageWhereInput[]
  name?: Prisma.StringFilter<"Village"> | string
  regionId?: Prisma.StringFilter<"Village"> | string
  createdAt?: Prisma.DateTimeFilter<"Village"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Village"> | Date | string
  region?: Prisma.XOR<Prisma.RegionScalarRelationFilter, Prisma.RegionWhereInput>
  vendors?: Prisma.VendorListRelationFilter
  assignments?: Prisma.AssignmentListRelationFilter
}, "id" | "name_regionId">

export type VillageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  regionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.VillageCountOrderByAggregateInput
  _max?: Prisma.VillageMaxOrderByAggregateInput
  _min?: Prisma.VillageMinOrderByAggregateInput
}

export type VillageScalarWhereWithAggregatesInput = {
  AND?: Prisma.VillageScalarWhereWithAggregatesInput | Prisma.VillageScalarWhereWithAggregatesInput[]
  OR?: Prisma.VillageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.VillageScalarWhereWithAggregatesInput | Prisma.VillageScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Village"> | string
  name?: Prisma.StringWithAggregatesFilter<"Village"> | string
  regionId?: Prisma.StringWithAggregatesFilter<"Village"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Village"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Village"> | Date | string
}

export type VillageCreateInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  region: Prisma.RegionCreateNestedOneWithoutVillagesInput
  vendors?: Prisma.VendorCreateNestedManyWithoutVillageInput
  assignments?: Prisma.AssignmentCreateNestedManyWithoutVillageInput
}

export type VillageUncheckedCreateInput = {
  id?: string
  name: string
  regionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  vendors?: Prisma.VendorUncheckedCreateNestedManyWithoutVillageInput
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutVillageInput
}

export type VillageUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  region?: Prisma.RegionUpdateOneRequiredWithoutVillagesNestedInput
  vendors?: Prisma.VendorUpdateManyWithoutVillageNestedInput
  assignments?: Prisma.AssignmentUpdateManyWithoutVillageNestedInput
}

export type VillageUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  regionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  vendors?: Prisma.VendorUncheckedUpdateManyWithoutVillageNestedInput
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutVillageNestedInput
}

export type VillageCreateManyInput = {
  id?: string
  name: string
  regionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type VillageUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VillageUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  regionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VillageListRelationFilter = {
  every?: Prisma.VillageWhereInput
  some?: Prisma.VillageWhereInput
  none?: Prisma.VillageWhereInput
}

export type VillageOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type VillageNameRegionIdCompoundUniqueInput = {
  name: string
  regionId: string
}

export type VillageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  regionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type VillageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  regionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type VillageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  regionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type VillageScalarRelationFilter = {
  is?: Prisma.VillageWhereInput
  isNot?: Prisma.VillageWhereInput
}

export type VillageCreateNestedManyWithoutRegionInput = {
  create?: Prisma.XOR<Prisma.VillageCreateWithoutRegionInput, Prisma.VillageUncheckedCreateWithoutRegionInput> | Prisma.VillageCreateWithoutRegionInput[] | Prisma.VillageUncheckedCreateWithoutRegionInput[]
  connectOrCreate?: Prisma.VillageCreateOrConnectWithoutRegionInput | Prisma.VillageCreateOrConnectWithoutRegionInput[]
  createMany?: Prisma.VillageCreateManyRegionInputEnvelope
  connect?: Prisma.VillageWhereUniqueInput | Prisma.VillageWhereUniqueInput[]
}

export type VillageUncheckedCreateNestedManyWithoutRegionInput = {
  create?: Prisma.XOR<Prisma.VillageCreateWithoutRegionInput, Prisma.VillageUncheckedCreateWithoutRegionInput> | Prisma.VillageCreateWithoutRegionInput[] | Prisma.VillageUncheckedCreateWithoutRegionInput[]
  connectOrCreate?: Prisma.VillageCreateOrConnectWithoutRegionInput | Prisma.VillageCreateOrConnectWithoutRegionInput[]
  createMany?: Prisma.VillageCreateManyRegionInputEnvelope
  connect?: Prisma.VillageWhereUniqueInput | Prisma.VillageWhereUniqueInput[]
}

export type VillageUpdateManyWithoutRegionNestedInput = {
  create?: Prisma.XOR<Prisma.VillageCreateWithoutRegionInput, Prisma.VillageUncheckedCreateWithoutRegionInput> | Prisma.VillageCreateWithoutRegionInput[] | Prisma.VillageUncheckedCreateWithoutRegionInput[]
  connectOrCreate?: Prisma.VillageCreateOrConnectWithoutRegionInput | Prisma.VillageCreateOrConnectWithoutRegionInput[]
  upsert?: Prisma.VillageUpsertWithWhereUniqueWithoutRegionInput | Prisma.VillageUpsertWithWhereUniqueWithoutRegionInput[]
  createMany?: Prisma.VillageCreateManyRegionInputEnvelope
  set?: Prisma.VillageWhereUniqueInput | Prisma.VillageWhereUniqueInput[]
  disconnect?: Prisma.VillageWhereUniqueInput | Prisma.VillageWhereUniqueInput[]
  delete?: Prisma.VillageWhereUniqueInput | Prisma.VillageWhereUniqueInput[]
  connect?: Prisma.VillageWhereUniqueInput | Prisma.VillageWhereUniqueInput[]
  update?: Prisma.VillageUpdateWithWhereUniqueWithoutRegionInput | Prisma.VillageUpdateWithWhereUniqueWithoutRegionInput[]
  updateMany?: Prisma.VillageUpdateManyWithWhereWithoutRegionInput | Prisma.VillageUpdateManyWithWhereWithoutRegionInput[]
  deleteMany?: Prisma.VillageScalarWhereInput | Prisma.VillageScalarWhereInput[]
}

export type VillageUncheckedUpdateManyWithoutRegionNestedInput = {
  create?: Prisma.XOR<Prisma.VillageCreateWithoutRegionInput, Prisma.VillageUncheckedCreateWithoutRegionInput> | Prisma.VillageCreateWithoutRegionInput[] | Prisma.VillageUncheckedCreateWithoutRegionInput[]
  connectOrCreate?: Prisma.VillageCreateOrConnectWithoutRegionInput | Prisma.VillageCreateOrConnectWithoutRegionInput[]
  upsert?: Prisma.VillageUpsertWithWhereUniqueWithoutRegionInput | Prisma.VillageUpsertWithWhereUniqueWithoutRegionInput[]
  createMany?: Prisma.VillageCreateManyRegionInputEnvelope
  set?: Prisma.VillageWhereUniqueInput | Prisma.VillageWhereUniqueInput[]
  disconnect?: Prisma.VillageWhereUniqueInput | Prisma.VillageWhereUniqueInput[]
  delete?: Prisma.VillageWhereUniqueInput | Prisma.VillageWhereUniqueInput[]
  connect?: Prisma.VillageWhereUniqueInput | Prisma.VillageWhereUniqueInput[]
  update?: Prisma.VillageUpdateWithWhereUniqueWithoutRegionInput | Prisma.VillageUpdateWithWhereUniqueWithoutRegionInput[]
  updateMany?: Prisma.VillageUpdateManyWithWhereWithoutRegionInput | Prisma.VillageUpdateManyWithWhereWithoutRegionInput[]
  deleteMany?: Prisma.VillageScalarWhereInput | Prisma.VillageScalarWhereInput[]
}

export type VillageCreateNestedOneWithoutVendorsInput = {
  create?: Prisma.XOR<Prisma.VillageCreateWithoutVendorsInput, Prisma.VillageUncheckedCreateWithoutVendorsInput>
  connectOrCreate?: Prisma.VillageCreateOrConnectWithoutVendorsInput
  connect?: Prisma.VillageWhereUniqueInput
}

export type VillageUpdateOneRequiredWithoutVendorsNestedInput = {
  create?: Prisma.XOR<Prisma.VillageCreateWithoutVendorsInput, Prisma.VillageUncheckedCreateWithoutVendorsInput>
  connectOrCreate?: Prisma.VillageCreateOrConnectWithoutVendorsInput
  upsert?: Prisma.VillageUpsertWithoutVendorsInput
  connect?: Prisma.VillageWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.VillageUpdateToOneWithWhereWithoutVendorsInput, Prisma.VillageUpdateWithoutVendorsInput>, Prisma.VillageUncheckedUpdateWithoutVendorsInput>
}

export type VillageCreateNestedOneWithoutAssignmentsInput = {
  create?: Prisma.XOR<Prisma.VillageCreateWithoutAssignmentsInput, Prisma.VillageUncheckedCreateWithoutAssignmentsInput>
  connectOrCreate?: Prisma.VillageCreateOrConnectWithoutAssignmentsInput
  connect?: Prisma.VillageWhereUniqueInput
}

export type VillageUpdateOneRequiredWithoutAssignmentsNestedInput = {
  create?: Prisma.XOR<Prisma.VillageCreateWithoutAssignmentsInput, Prisma.VillageUncheckedCreateWithoutAssignmentsInput>
  connectOrCreate?: Prisma.VillageCreateOrConnectWithoutAssignmentsInput
  upsert?: Prisma.VillageUpsertWithoutAssignmentsInput
  connect?: Prisma.VillageWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.VillageUpdateToOneWithWhereWithoutAssignmentsInput, Prisma.VillageUpdateWithoutAssignmentsInput>, Prisma.VillageUncheckedUpdateWithoutAssignmentsInput>
}

export type VillageCreateWithoutRegionInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  vendors?: Prisma.VendorCreateNestedManyWithoutVillageInput
  assignments?: Prisma.AssignmentCreateNestedManyWithoutVillageInput
}

export type VillageUncheckedCreateWithoutRegionInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  vendors?: Prisma.VendorUncheckedCreateNestedManyWithoutVillageInput
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutVillageInput
}

export type VillageCreateOrConnectWithoutRegionInput = {
  where: Prisma.VillageWhereUniqueInput
  create: Prisma.XOR<Prisma.VillageCreateWithoutRegionInput, Prisma.VillageUncheckedCreateWithoutRegionInput>
}

export type VillageCreateManyRegionInputEnvelope = {
  data: Prisma.VillageCreateManyRegionInput | Prisma.VillageCreateManyRegionInput[]
  skipDuplicates?: boolean
}

export type VillageUpsertWithWhereUniqueWithoutRegionInput = {
  where: Prisma.VillageWhereUniqueInput
  update: Prisma.XOR<Prisma.VillageUpdateWithoutRegionInput, Prisma.VillageUncheckedUpdateWithoutRegionInput>
  create: Prisma.XOR<Prisma.VillageCreateWithoutRegionInput, Prisma.VillageUncheckedCreateWithoutRegionInput>
}

export type VillageUpdateWithWhereUniqueWithoutRegionInput = {
  where: Prisma.VillageWhereUniqueInput
  data: Prisma.XOR<Prisma.VillageUpdateWithoutRegionInput, Prisma.VillageUncheckedUpdateWithoutRegionInput>
}

export type VillageUpdateManyWithWhereWithoutRegionInput = {
  where: Prisma.VillageScalarWhereInput
  data: Prisma.XOR<Prisma.VillageUpdateManyMutationInput, Prisma.VillageUncheckedUpdateManyWithoutRegionInput>
}

export type VillageScalarWhereInput = {
  AND?: Prisma.VillageScalarWhereInput | Prisma.VillageScalarWhereInput[]
  OR?: Prisma.VillageScalarWhereInput[]
  NOT?: Prisma.VillageScalarWhereInput | Prisma.VillageScalarWhereInput[]
  id?: Prisma.StringFilter<"Village"> | string
  name?: Prisma.StringFilter<"Village"> | string
  regionId?: Prisma.StringFilter<"Village"> | string
  createdAt?: Prisma.DateTimeFilter<"Village"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Village"> | Date | string
}

export type VillageCreateWithoutVendorsInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  region: Prisma.RegionCreateNestedOneWithoutVillagesInput
  assignments?: Prisma.AssignmentCreateNestedManyWithoutVillageInput
}

export type VillageUncheckedCreateWithoutVendorsInput = {
  id?: string
  name: string
  regionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  assignments?: Prisma.AssignmentUncheckedCreateNestedManyWithoutVillageInput
}

export type VillageCreateOrConnectWithoutVendorsInput = {
  where: Prisma.VillageWhereUniqueInput
  create: Prisma.XOR<Prisma.VillageCreateWithoutVendorsInput, Prisma.VillageUncheckedCreateWithoutVendorsInput>
}

export type VillageUpsertWithoutVendorsInput = {
  update: Prisma.XOR<Prisma.VillageUpdateWithoutVendorsInput, Prisma.VillageUncheckedUpdateWithoutVendorsInput>
  create: Prisma.XOR<Prisma.VillageCreateWithoutVendorsInput, Prisma.VillageUncheckedCreateWithoutVendorsInput>
  where?: Prisma.VillageWhereInput
}

export type VillageUpdateToOneWithWhereWithoutVendorsInput = {
  where?: Prisma.VillageWhereInput
  data: Prisma.XOR<Prisma.VillageUpdateWithoutVendorsInput, Prisma.VillageUncheckedUpdateWithoutVendorsInput>
}

export type VillageUpdateWithoutVendorsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  region?: Prisma.RegionUpdateOneRequiredWithoutVillagesNestedInput
  assignments?: Prisma.AssignmentUpdateManyWithoutVillageNestedInput
}

export type VillageUncheckedUpdateWithoutVendorsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  regionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutVillageNestedInput
}

export type VillageCreateWithoutAssignmentsInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  region: Prisma.RegionCreateNestedOneWithoutVillagesInput
  vendors?: Prisma.VendorCreateNestedManyWithoutVillageInput
}

export type VillageUncheckedCreateWithoutAssignmentsInput = {
  id?: string
  name: string
  regionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  vendors?: Prisma.VendorUncheckedCreateNestedManyWithoutVillageInput
}

export type VillageCreateOrConnectWithoutAssignmentsInput = {
  where: Prisma.VillageWhereUniqueInput
  create: Prisma.XOR<Prisma.VillageCreateWithoutAssignmentsInput, Prisma.VillageUncheckedCreateWithoutAssignmentsInput>
}

export type VillageUpsertWithoutAssignmentsInput = {
  update: Prisma.XOR<Prisma.VillageUpdateWithoutAssignmentsInput, Prisma.VillageUncheckedUpdateWithoutAssignmentsInput>
  create: Prisma.XOR<Prisma.VillageCreateWithoutAssignmentsInput, Prisma.VillageUncheckedCreateWithoutAssignmentsInput>
  where?: Prisma.VillageWhereInput
}

export type VillageUpdateToOneWithWhereWithoutAssignmentsInput = {
  where?: Prisma.VillageWhereInput
  data: Prisma.XOR<Prisma.VillageUpdateWithoutAssignmentsInput, Prisma.VillageUncheckedUpdateWithoutAssignmentsInput>
}

export type VillageUpdateWithoutAssignmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  region?: Prisma.RegionUpdateOneRequiredWithoutVillagesNestedInput
  vendors?: Prisma.VendorUpdateManyWithoutVillageNestedInput
}

export type VillageUncheckedUpdateWithoutAssignmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  regionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  vendors?: Prisma.VendorUncheckedUpdateManyWithoutVillageNestedInput
}

export type VillageCreateManyRegionInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type VillageUpdateWithoutRegionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  vendors?: Prisma.VendorUpdateManyWithoutVillageNestedInput
  assignments?: Prisma.AssignmentUpdateManyWithoutVillageNestedInput
}

export type VillageUncheckedUpdateWithoutRegionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  vendors?: Prisma.VendorUncheckedUpdateManyWithoutVillageNestedInput
  assignments?: Prisma.AssignmentUncheckedUpdateManyWithoutVillageNestedInput
}

export type VillageUncheckedUpdateManyWithoutRegionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type VillageCountOutputType
 */

export type VillageCountOutputType = {
  vendors: number
  assignments: number
}

export type VillageCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  vendors?: boolean | VillageCountOutputTypeCountVendorsArgs
  assignments?: boolean | VillageCountOutputTypeCountAssignmentsArgs
}

/**
 * VillageCountOutputType without action
 */
export type VillageCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VillageCountOutputType
   */
  select?: Prisma.VillageCountOutputTypeSelect<ExtArgs> | null
}

/**
 * VillageCountOutputType without action
 */
export type VillageCountOutputTypeCountVendorsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.VendorWhereInput
}

/**
 * VillageCountOutputType without action
 */
export type VillageCountOutputTypeCountAssignmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AssignmentWhereInput
}


export type VillageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  regionId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  region?: boolean | Prisma.RegionDefaultArgs<ExtArgs>
  vendors?: boolean | Prisma.Village$vendorsArgs<ExtArgs>
  assignments?: boolean | Prisma.Village$assignmentsArgs<ExtArgs>
  _count?: boolean | Prisma.VillageCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["village"]>

export type VillageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  regionId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  region?: boolean | Prisma.RegionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["village"]>

export type VillageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  regionId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  region?: boolean | Prisma.RegionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["village"]>

export type VillageSelectScalar = {
  id?: boolean
  name?: boolean
  regionId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type VillageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "regionId" | "createdAt" | "updatedAt", ExtArgs["result"]["village"]>
export type VillageInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  region?: boolean | Prisma.RegionDefaultArgs<ExtArgs>
  vendors?: boolean | Prisma.Village$vendorsArgs<ExtArgs>
  assignments?: boolean | Prisma.Village$assignmentsArgs<ExtArgs>
  _count?: boolean | Prisma.VillageCountOutputTypeDefaultArgs<ExtArgs>
}
export type VillageIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  region?: boolean | Prisma.RegionDefaultArgs<ExtArgs>
}
export type VillageIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  region?: boolean | Prisma.RegionDefaultArgs<ExtArgs>
}

export type $VillagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Village"
  objects: {
    region: Prisma.$RegionPayload<ExtArgs>
    vendors: Prisma.$VendorPayload<ExtArgs>[]
    assignments: Prisma.$AssignmentPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    regionId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["village"]>
  composites: {}
}

export type VillageGetPayload<S extends boolean | null | undefined | VillageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$VillagePayload, S>

export type VillageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<VillageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: VillageCountAggregateInputType | true
  }

export interface VillageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Village'], meta: { name: 'Village' } }
  /**
   * Find zero or one Village that matches the filter.
   * @param {VillageFindUniqueArgs} args - Arguments to find a Village
   * @example
   * // Get one Village
   * const village = await prisma.village.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends VillageFindUniqueArgs>(args: Prisma.SelectSubset<T, VillageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__VillageClient<runtime.Types.Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Village that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {VillageFindUniqueOrThrowArgs} args - Arguments to find a Village
   * @example
   * // Get one Village
   * const village = await prisma.village.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends VillageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, VillageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__VillageClient<runtime.Types.Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Village that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VillageFindFirstArgs} args - Arguments to find a Village
   * @example
   * // Get one Village
   * const village = await prisma.village.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends VillageFindFirstArgs>(args?: Prisma.SelectSubset<T, VillageFindFirstArgs<ExtArgs>>): Prisma.Prisma__VillageClient<runtime.Types.Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Village that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VillageFindFirstOrThrowArgs} args - Arguments to find a Village
   * @example
   * // Get one Village
   * const village = await prisma.village.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends VillageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, VillageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__VillageClient<runtime.Types.Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Villages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VillageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Villages
   * const villages = await prisma.village.findMany()
   * 
   * // Get first 10 Villages
   * const villages = await prisma.village.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const villageWithIdOnly = await prisma.village.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends VillageFindManyArgs>(args?: Prisma.SelectSubset<T, VillageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Village.
   * @param {VillageCreateArgs} args - Arguments to create a Village.
   * @example
   * // Create one Village
   * const Village = await prisma.village.create({
   *   data: {
   *     // ... data to create a Village
   *   }
   * })
   * 
   */
  create<T extends VillageCreateArgs>(args: Prisma.SelectSubset<T, VillageCreateArgs<ExtArgs>>): Prisma.Prisma__VillageClient<runtime.Types.Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Villages.
   * @param {VillageCreateManyArgs} args - Arguments to create many Villages.
   * @example
   * // Create many Villages
   * const village = await prisma.village.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends VillageCreateManyArgs>(args?: Prisma.SelectSubset<T, VillageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Villages and returns the data saved in the database.
   * @param {VillageCreateManyAndReturnArgs} args - Arguments to create many Villages.
   * @example
   * // Create many Villages
   * const village = await prisma.village.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Villages and only return the `id`
   * const villageWithIdOnly = await prisma.village.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends VillageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, VillageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Village.
   * @param {VillageDeleteArgs} args - Arguments to delete one Village.
   * @example
   * // Delete one Village
   * const Village = await prisma.village.delete({
   *   where: {
   *     // ... filter to delete one Village
   *   }
   * })
   * 
   */
  delete<T extends VillageDeleteArgs>(args: Prisma.SelectSubset<T, VillageDeleteArgs<ExtArgs>>): Prisma.Prisma__VillageClient<runtime.Types.Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Village.
   * @param {VillageUpdateArgs} args - Arguments to update one Village.
   * @example
   * // Update one Village
   * const village = await prisma.village.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends VillageUpdateArgs>(args: Prisma.SelectSubset<T, VillageUpdateArgs<ExtArgs>>): Prisma.Prisma__VillageClient<runtime.Types.Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Villages.
   * @param {VillageDeleteManyArgs} args - Arguments to filter Villages to delete.
   * @example
   * // Delete a few Villages
   * const { count } = await prisma.village.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends VillageDeleteManyArgs>(args?: Prisma.SelectSubset<T, VillageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Villages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VillageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Villages
   * const village = await prisma.village.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends VillageUpdateManyArgs>(args: Prisma.SelectSubset<T, VillageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Villages and returns the data updated in the database.
   * @param {VillageUpdateManyAndReturnArgs} args - Arguments to update many Villages.
   * @example
   * // Update many Villages
   * const village = await prisma.village.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Villages and only return the `id`
   * const villageWithIdOnly = await prisma.village.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends VillageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, VillageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Village.
   * @param {VillageUpsertArgs} args - Arguments to update or create a Village.
   * @example
   * // Update or create a Village
   * const village = await prisma.village.upsert({
   *   create: {
   *     // ... data to create a Village
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Village we want to update
   *   }
   * })
   */
  upsert<T extends VillageUpsertArgs>(args: Prisma.SelectSubset<T, VillageUpsertArgs<ExtArgs>>): Prisma.Prisma__VillageClient<runtime.Types.Result.GetResult<Prisma.$VillagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Villages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VillageCountArgs} args - Arguments to filter Villages to count.
   * @example
   * // Count the number of Villages
   * const count = await prisma.village.count({
   *   where: {
   *     // ... the filter for the Villages we want to count
   *   }
   * })
  **/
  count<T extends VillageCountArgs>(
    args?: Prisma.Subset<T, VillageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], VillageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Village.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VillageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends VillageAggregateArgs>(args: Prisma.Subset<T, VillageAggregateArgs>): Prisma.PrismaPromise<GetVillageAggregateType<T>>

  /**
   * Group by Village.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VillageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends VillageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: VillageGroupByArgs['orderBy'] }
      : { orderBy?: VillageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, VillageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVillageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Village model
 */
readonly fields: VillageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Village.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__VillageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  region<T extends Prisma.RegionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RegionDefaultArgs<ExtArgs>>): Prisma.Prisma__RegionClient<runtime.Types.Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  vendors<T extends Prisma.Village$vendorsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Village$vendorsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  assignments<T extends Prisma.Village$assignmentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Village$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Village model
 */
export interface VillageFieldRefs {
  readonly id: Prisma.FieldRef<"Village", 'String'>
  readonly name: Prisma.FieldRef<"Village", 'String'>
  readonly regionId: Prisma.FieldRef<"Village", 'String'>
  readonly createdAt: Prisma.FieldRef<"Village", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Village", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Village findUnique
 */
export type VillageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Village
   */
  select?: Prisma.VillageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Village
   */
  omit?: Prisma.VillageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VillageInclude<ExtArgs> | null
  /**
   * Filter, which Village to fetch.
   */
  where: Prisma.VillageWhereUniqueInput
}

/**
 * Village findUniqueOrThrow
 */
export type VillageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Village
   */
  select?: Prisma.VillageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Village
   */
  omit?: Prisma.VillageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VillageInclude<ExtArgs> | null
  /**
   * Filter, which Village to fetch.
   */
  where: Prisma.VillageWhereUniqueInput
}

/**
 * Village findFirst
 */
export type VillageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Village
   */
  select?: Prisma.VillageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Village
   */
  omit?: Prisma.VillageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VillageInclude<ExtArgs> | null
  /**
   * Filter, which Village to fetch.
   */
  where?: Prisma.VillageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Villages to fetch.
   */
  orderBy?: Prisma.VillageOrderByWithRelationInput | Prisma.VillageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Villages.
   */
  cursor?: Prisma.VillageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Villages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Villages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Villages.
   */
  distinct?: Prisma.VillageScalarFieldEnum | Prisma.VillageScalarFieldEnum[]
}

/**
 * Village findFirstOrThrow
 */
export type VillageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Village
   */
  select?: Prisma.VillageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Village
   */
  omit?: Prisma.VillageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VillageInclude<ExtArgs> | null
  /**
   * Filter, which Village to fetch.
   */
  where?: Prisma.VillageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Villages to fetch.
   */
  orderBy?: Prisma.VillageOrderByWithRelationInput | Prisma.VillageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Villages.
   */
  cursor?: Prisma.VillageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Villages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Villages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Villages.
   */
  distinct?: Prisma.VillageScalarFieldEnum | Prisma.VillageScalarFieldEnum[]
}

/**
 * Village findMany
 */
export type VillageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Village
   */
  select?: Prisma.VillageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Village
   */
  omit?: Prisma.VillageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VillageInclude<ExtArgs> | null
  /**
   * Filter, which Villages to fetch.
   */
  where?: Prisma.VillageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Villages to fetch.
   */
  orderBy?: Prisma.VillageOrderByWithRelationInput | Prisma.VillageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Villages.
   */
  cursor?: Prisma.VillageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Villages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Villages.
   */
  skip?: number
  distinct?: Prisma.VillageScalarFieldEnum | Prisma.VillageScalarFieldEnum[]
}

/**
 * Village create
 */
export type VillageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Village
   */
  select?: Prisma.VillageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Village
   */
  omit?: Prisma.VillageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VillageInclude<ExtArgs> | null
  /**
   * The data needed to create a Village.
   */
  data: Prisma.XOR<Prisma.VillageCreateInput, Prisma.VillageUncheckedCreateInput>
}

/**
 * Village createMany
 */
export type VillageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Villages.
   */
  data: Prisma.VillageCreateManyInput | Prisma.VillageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Village createManyAndReturn
 */
export type VillageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Village
   */
  select?: Prisma.VillageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Village
   */
  omit?: Prisma.VillageOmit<ExtArgs> | null
  /**
   * The data used to create many Villages.
   */
  data: Prisma.VillageCreateManyInput | Prisma.VillageCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VillageIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Village update
 */
export type VillageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Village
   */
  select?: Prisma.VillageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Village
   */
  omit?: Prisma.VillageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VillageInclude<ExtArgs> | null
  /**
   * The data needed to update a Village.
   */
  data: Prisma.XOR<Prisma.VillageUpdateInput, Prisma.VillageUncheckedUpdateInput>
  /**
   * Choose, which Village to update.
   */
  where: Prisma.VillageWhereUniqueInput
}

/**
 * Village updateMany
 */
export type VillageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Villages.
   */
  data: Prisma.XOR<Prisma.VillageUpdateManyMutationInput, Prisma.VillageUncheckedUpdateManyInput>
  /**
   * Filter which Villages to update
   */
  where?: Prisma.VillageWhereInput
  /**
   * Limit how many Villages to update.
   */
  limit?: number
}

/**
 * Village updateManyAndReturn
 */
export type VillageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Village
   */
  select?: Prisma.VillageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Village
   */
  omit?: Prisma.VillageOmit<ExtArgs> | null
  /**
   * The data used to update Villages.
   */
  data: Prisma.XOR<Prisma.VillageUpdateManyMutationInput, Prisma.VillageUncheckedUpdateManyInput>
  /**
   * Filter which Villages to update
   */
  where?: Prisma.VillageWhereInput
  /**
   * Limit how many Villages to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VillageIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Village upsert
 */
export type VillageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Village
   */
  select?: Prisma.VillageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Village
   */
  omit?: Prisma.VillageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VillageInclude<ExtArgs> | null
  /**
   * The filter to search for the Village to update in case it exists.
   */
  where: Prisma.VillageWhereUniqueInput
  /**
   * In case the Village found by the `where` argument doesn't exist, create a new Village with this data.
   */
  create: Prisma.XOR<Prisma.VillageCreateInput, Prisma.VillageUncheckedCreateInput>
  /**
   * In case the Village was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.VillageUpdateInput, Prisma.VillageUncheckedUpdateInput>
}

/**
 * Village delete
 */
export type VillageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Village
   */
  select?: Prisma.VillageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Village
   */
  omit?: Prisma.VillageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VillageInclude<ExtArgs> | null
  /**
   * Filter which Village to delete.
   */
  where: Prisma.VillageWhereUniqueInput
}

/**
 * Village deleteMany
 */
export type VillageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Villages to delete
   */
  where?: Prisma.VillageWhereInput
  /**
   * Limit how many Villages to delete.
   */
  limit?: number
}

/**
 * Village.vendors
 */
export type Village$vendorsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vendor
   */
  select?: Prisma.VendorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vendor
   */
  omit?: Prisma.VendorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VendorInclude<ExtArgs> | null
  where?: Prisma.VendorWhereInput
  orderBy?: Prisma.VendorOrderByWithRelationInput | Prisma.VendorOrderByWithRelationInput[]
  cursor?: Prisma.VendorWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.VendorScalarFieldEnum | Prisma.VendorScalarFieldEnum[]
}

/**
 * Village.assignments
 */
export type Village$assignmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assignment
   */
  select?: Prisma.AssignmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assignment
   */
  omit?: Prisma.AssignmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignmentInclude<ExtArgs> | null
  where?: Prisma.AssignmentWhereInput
  orderBy?: Prisma.AssignmentOrderByWithRelationInput | Prisma.AssignmentOrderByWithRelationInput[]
  cursor?: Prisma.AssignmentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AssignmentScalarFieldEnum | Prisma.AssignmentScalarFieldEnum[]
}

/**
 * Village without action
 */
export type VillageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Village
   */
  select?: Prisma.VillageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Village
   */
  omit?: Prisma.VillageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VillageInclude<ExtArgs> | null
}
